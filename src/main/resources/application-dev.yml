# =========================
# application-dev.yml (開發)：本機或 docker 內部 DB，方便看 SQL、允許自動建表
# =========================
server:
  port: 8888

spring:
  datasource:
    #    driverClassName: com.mysql.cj.jdbc.Driver # 驅動類型(注意MySQL 8.0的值是com.mysql.cj.jdbc.Driver和之前不同)
    url: ${DB_URL:jdbc:mysql://localhost:3306/xkbase?useSSL=false&serverTimezone=UTC&useUnicode=yes&characterEncoding=UTF-8&characterSetResults=UTF-8} # 數據庫連接字符串
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:1qaz@WSX}
    type: com.alibaba.druid.pool.DruidDataSource
    hikari: #Hibernate 提示数据库版本和隔离级别未定义。虽然不影响功能，但建议明确配置：
      minimum-idle: 5         # 最小空闲连接数
      maximum-pool-size: 10   # 最大连接池大小
      connection-test-query: SELECT 1  # 测试连接的 SQL
  jpa:
    show-sql: true # 在日志中显示执行的 SQL 语句
    hibernate:
      ddl-auto: update # 表结构变更策略: none, update, create

logging:
  level:
    root: INFO                  # 全局日志级别设置为 INFO
    org.springframework: DEBUG   # 启用 Spring 的调试日志
    com.xk: INFO                # 仅为 com.xk 包启用 DEBUG 级别日志
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.apache.ibatis: DEBUG
    org.apache.ibatis.builder: TRACE
  file:
    path: ./logs                # 指定日志文件的路径（请确保路径存在）
    name: log-pro.log           # 指定日志文件的名称

# mybatis配置
mybatis:
  #    mapper-locations: classpath*:**/mapper/xml/**Mapper.xml    # mapper映射文件位置
  #    type-aliases-package: com.xk.**.model    # 实体类所在的位置
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl   #用于控制台打印sql语句
#    map-underscore-to-acmel-case: true    #開啟mybatis駝峰式命名規則自動轉換
#  mybatis-plus:
#    mapper-locations: classpath*:**/mapper/xml/**Mapper.xml    # mapper映射文件位置

springdoc.api-docs.enabled: true
springdoc.swagger-ui.enabled: true





#spring:
#  jpa:
#    database: mysql # 指定数据库类型
#    database-platform: org.hibernate.dialect.MySQL8Dialect # Hibernate 方言 (MySQL 8.x)


# ===== 自定義 swagger 配置 ===== #
#springfox:
#  documentation:
#    swagger-ui:
#      enabled : true

#  OFF：关闭所有日志记录。
#  FATAL：仅记录严重的错误，可能导致应用程序崩溃的情况。
#  ERROR：记录错误信息，表示应用程序在运行中出现了问题。
#  WARN：记录潜在的问题或警告，但不一定是错误。
#  INFO：记录常规信息，通常用来了解应用程序的状态或进程。
#  DEBUG：记录详细的调试信息，用于开发和调试阶段，包含应用程序的内部状态、变量值等。
#  TRACE：记录最详细的日志信息，包括每一步的执行情况，比DEBUG更详细。
#  ALL：打开所有级别的日志记录（从TRACE到FATAL）。